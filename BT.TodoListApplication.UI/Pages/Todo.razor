@page "/todo"
@*This ensures that no one can access this page without autorization*@
@attribute [Authorize] 
@using BT.TodoListApplication.BL;
@using BT.TodoListApplication.BL.Models;
@using BT.TodoListApplication.DB.Helper;
@using System.Security.Claims;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor;

<html>
    <body>
        <h1 id="heading_purple">Bhuwan's Todo</h1>
        @* Text Field to get data and then set it in the object created below *@
        <EditForm Model="todoItem" OnSubmit="@AddItemToList" class="d-flex justify-content-center" style="margin: auto;">
            <div class="input-group-append">
                <span class="input-group-text" style="border-radius: 20px; background:#8e2de2; border: 0px white solid; height: 70px; gap: 20px;">
                    <InputText style="width: 600px;" placeholder="What is your next task?" class="form-control" id="ItemNameTextField" @bind-Value="todoItem.ItemName" />
                    <InputText class="form-control TodoInput" type="date" style="width: 170px;" @bind-Value="itemDate" />
                    <InputText class="form-control TodoInput" type="time" style="width: 150px;" @bind-Value="itemTime" />
                </span>
            </div>
            <button style="margin-left: 20px;" id="button_purple" type="submit">Submit</button>
        </EditForm>
        @* Displaying the data *@
        <div id="todo-table-parent">
            <table class="table bg-light" id="todo_table">
                <thead>
                    <tr>
                        <th scope="col">Item Name</th>
                        <th style="width: 0px;">Dates</th>
                        <th style="width: 10px;"></th>
                        <th style="width: 0px;"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (TodoItem todoListData in TodoList)
                    {
                        <tr>
                            @if (editingId != todoListData.Id)
                            {
                                
                                    @if(todoListData.isChecked.Equals("true"))
                                    {
                                        <td>
                                             <input type="checkbox" class="form-check-input border-2" id="todoCheckbox" @onchange="() => UpdateCheckedFromEditMode(todoListData)" checked>
                                             <label style="margin-left: 5px;" for="checkbox">@todoListData.ItemName</label>
                                        </td>
                                    } else
                                    {
                                        <td>
                                            <input type="checkbox" class="form-check-input border-2" id="todoCheckbox" @onchange="() => UpdateCheckedFromEditMode(todoListData)">
                                            <label style="margin-left: 5px;" for="checkbox">@todoListData.ItemName</label>
                                        </td>
                                    }

                                @*<td>@todoListData.ItemName</td>*@
                                <td style="width: 230px !important; font-size: 19px;">@todoListData.ItemTime</td>
                                <td><button class="btn btn-primary" @onclick="() => EditItemFromList(todoListData.Id)">Edit</button></td>
                                <td><button class="btn btn-primary" @onclick="() => RemoveItemFromList(todoListData)">Remove</button></td>
                            }
                            else
                            {
                                <td>
                                    <InputText placeholder="Item Name" style="font-size: 25px;" class="form-control" id="name" @bind-Value="@todoListData.ItemName"></InputText>
                                </td>
                                <td style="width: 230px !important; font-size: 19px;">@todoListData.ItemTime</td>
                                <td><button class="btn btn-primary" @onclick="() => UpdateItemFromEditMode(todoListData)">Save</button></td>
                                <td><button class="btn btn-primary" @onclick="CancelItemFromEditMode">Cancel</button></td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>

    </body>
</html>


@code {
    // C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\
    //int Id = HttpContextAccessor.HttpContext?.Items["User"];
    bool test = true;
    public ClaimsPrincipal User => HttpContextAccessor.HttpContext?.User;
    public string Id => User?.FindFirstValue(ClaimTypes.NameIdentifier);

    // Making a model so that the EditForm can use it
    TodoItem todoItem = new TodoItem();
    // Storing the time into a string to be later then converted back into DateTime 
    private string itemTime;
    private string itemDate;
    int editingId;
    private List<TodoItem> TodoList = new List<TodoItem>();
    /* This gets called when the components are initialized */
    protected override void OnInitialized()
    {
        //TodoList = TodoManager.getAllItems();
        TodoList = TodoManager.getItemsByUserId(Id);
    }
    private void RemoveItemFromList(TodoItem data)
    {
        try {
            TodoManager.deleteItem(data);
            TodoList = TodoManager.getItemsByUserId(Id);
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    private void AddItemToList()
    {
        try
        {
            todoItem.ItemDescription = "Test";

            if (!(itemTime == null & itemDate == null))
            {
                TimeSpan timeSpan = TimeSpan.Parse(itemTime);
                todoItem.ItemTime = DateTime.Parse(itemDate).Date.Add(timeSpan);
            } else
            {
                todoItem.ItemTime = DateTime.Now;
            }
            todoItem.UserId = Id;
            TodoManager.insertItem(todoItem);
            TodoList = TodoManager.getItemsByUserId(Id);
            todoItem = new TodoItem(); // Reseting the new Item to empty again
        } catch(Exception ex)
        {
            throw ex;
        }

    }
    private void EditItemFromList(int data)
    {
        editingId = data;
    }
    private void UpdateItemFromEditMode(TodoItem data)
    {
        try
        {
            TodoManager.updateItem(data);
            editingId = 0;
            TodoList = TodoManager.getItemsByUserId(Id);
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    private void UpdateCheckedFromEditMode(TodoItem data)
    {
        try
        {
            if(data.isChecked.Equals("true"))
            {
                data.isChecked = "false";
            } else
            {
                data.isChecked = "true";
            }
            TodoManager.updateItem(data);
            TodoList = TodoManager.getItemsByUserId(Id);
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }
    private void CancelItemFromEditMode()
    {
        editingId = 0;
    }
}


