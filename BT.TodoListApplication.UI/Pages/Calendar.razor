@page "/calendar"
@using BT.TodoListApplication.BL;
@using System.Security.Claims;
@using BT.TodoListApplication.BL.Models;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor;
@attribute [Authorize]
<html>
    <body>
        <div id="calendar_button_group">
            <button id="button_purple" @onclick="() => { monthsAway--; CreateMonth(); }">Previous Month</button>
            <h1>@MonthName @year</h1>
            <button id="button_purple" @onclick="() => { monthsAway++; CreateMonth(); }">Next Month</button>
        </div>
        <section>
                @for (int dummyCol = 0; dummyCol <= numberOfDummyColumn; dummyCol++)
                {
                    <div></div>
                }
                @for (int day = 1; day <= monthEnd.Day; day++)
                {
                    <div style="position: relative;">
                            @foreach(TodoItem item in TodoList)
                            {
                                @if(item.ItemTime.Day == day && item.ItemTime.Month == month && item.ItemTime.Year == year)
                                {
                                    <div class="calendar_item_parent" @onclick="() => ShowItemDetails(item)">
                                        <a>@item.ItemName</a>
                                        @if (ItemId == item.Id)
                                        {
                                            <div class="@tempClassOnItemDetail">
                                                <EditForm Model="todoItem" >
                                                    <InputText style="height: 20px" placeholder=" Item Description" class="form-control" id="name" @bind-Value="@item.ItemDescription"></InputText>
                                                    <p>@item.ItemTime</p>
                                                    <button class="btn btn-primary" style="display: inline-block" @onclick="() => UpdateItemFromEditMode(item)">Save</button>
                                                 </EditForm>
                                            </div>
                                        }
                                    </div>
                                }
                            }
                            <div id="calendar_day">@day</div>
                            @if (!(currentDay != day))
                            {
                                if (monthsAway == 0)
                                {
                                    <div id="calendar_day_currentday">@day</div>
                                }
                                else
                                {
                                    <div id="calendar_day">@day</div>
                                }
                            }
                    </div>
                }
        </section>
    </body>
</html>

@code {
    /* Declaring the variables */
    string MonthName = "";
    string tempClassOnItemDetail = "";
    TodoItem todoItem = new TodoItem();
    int ItemId = 0;
    DateTime monthEnd;
    int numberOfDummyColumn = 0;
    int monthsAway = 0;
    int month = 0;
    int year = 0;
    private List<TodoItem> TodoList = new List<TodoItem>();
    int currentDay = DateTime.Now.Day;

    public ClaimsPrincipal User => HttpContextAccessor.HttpContext?.User;
    public string Id => User?.FindFirstValue(ClaimTypes.NameIdentifier);
    protected override void OnInitialized()
    {
        TodoList = TodoManager.getItemsByUserId(Id);
        CreateMonth();
        tempClassOnItemDetail = "HideItemDetails";
        ItemId = 0;
    }
    void CreateMonth()
    {
        year = DateTime.Now.Year;
        month = DateTime.Now.Month + monthsAway;
        var tempDate = DateTime.Now.AddMonths(monthsAway);
        month = tempDate.Month;
        year = tempDate.Year;
        DateTime monthStart = new DateTime(year, month, 1); //2023 June 1
        monthEnd = monthStart.AddMonths(1).AddDays(-1); // Add a whole month but subtract one which gives the end of the month
        MonthName = monthStart.Month switch
        {
            1 => "January",
            2 => "February",
            3 => "March",
            4 => "April",
            5 => "May",
            6 => "June",
            7 => "July",
            8 => "August",
            9 => "September",
            10 => "October",
            11 => "November",
            12 => "December",
            _ => "" // Default case
        };

        numberOfDummyColumn = (int)monthStart.DayOfWeek; // If it is tueday, give us 2
    }
    void ShowItemDetails(TodoItem data)
    {
        if (!(tempClassOnItemDetail.Equals("ShowItemDetails")))
        {
            tempClassOnItemDetail = "ShowItemDetails";
            ItemId = data.Id;
        } else
        {
            ItemId = 0;
            tempClassOnItemDetail = "HideItemDetails";
        }
    }
    private void UpdateItemFromEditMode(TodoItem data)
    {
        try
        {
            TodoManager.updateItem(data);
            TodoList = TodoManager.getItemsByUserId(Id);
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

}
